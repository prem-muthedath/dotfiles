" ================================= VIMRC ======================================
" author: Prem Muthedath
" ====================== USEFUL LINKS
" organize your vimrc: https://vimways.org/2018/from-vimrc-to-vim/
" vim cheat sheet: https://vim.rtorr.com
" find/replace in files; /u/ nikko bellic @ https://tinyurl.com/3fxk9a62 (vi.SE)
" good comments: /u/ martin tournoij @ https://tinyurl.com/xn6fbrmm (vi.SE)
" 0 vs ^ vs | vs _ => /u/ romainl @ https://tinyurl.com/bde9mbrz (reddit)
" ==============================================================================

" load file containing autocommands first!
source ~/dotfiles/vim/plugin/autocmds.vim

" load ftplugin & indent files; highlight syntax
filetype plugin on
filetype indent on
syntax on

" set up colorscheme
set background=dark
colorscheme sorcerer

" use space for all indentation
set expandtab
set shiftwidth=2
set softtabstop=2

" `CTRL-K F B` to get space symbol in listchars;
" REF: see /u/ randy morris @ https://tinyurl.com/y97g3akv
" REF: setting dictionary file:
"   1. for system dict file, see https://tinyurl.com/4bb8zd3z (vi.SE)
"   2. to set dict file, see /u/ romainl @ https://tinyurl.com/4789kmdv (so)
set autoindent                                " auto indent for all ft
set number                                    " show line number
set wrap                                      " wrap lines (for display)
set textwidth=80                              " std textwidth; wrap lines beyond
set colorcolumn=+1                            " mark textwidth
set wildmenu                                  " <Tab> cl-completion
set wildcharm=<C-Z>                           " allow <Tab> in map completion
set listchars=space:█,trail:█,eol:¬,tab:▸\    " show these on :set list
set hlsearch                                  " highlight search ON, as default
set incsearch                                 " incremental search ON
set history=1000                              " keep large history
set dictionary+=/usr/share/dict/words         " add dictionary file to default

" format options: format comments but not code
set fo=
set fo+=c      " autowrap comments using textwidth
set fo+=o      " insert comment leader on press o
set fo+=r      " insert comment leader on return
set fo+=j      " smartly join two comments
set fo+=w      " spot as same paragraph if trailing whitespace
set fo+=l      " don't break existing long lines
set fo+=a      " autoformat paragraphs (with `c` option, applies only to comments)
set fo+=n      " spot numbered lists
set fo+=q      " allow gq to format comments
set fo-=t      " no text autowrap

" add these 'bullet' format list patterns to default
set flp+=\\\|^\\s*[-+*]\\+\\s\\+          " - , -- , + , ++ ,  * , ** , ...
set flp+=\\\|^\\s*\\w[.)]\\s\\+           " a. , a) , b. , b) , ...
set flp+=\\\|^\\s*[ivxIVX]\\+[.)]\\s\\+   " i. , i) , ii. , ii) , ...

" make your own statusline
" filename: https://vim.fandom.com/wiki/Get_the_name_of_the_current_file
" filename code: see :help statusline for use of `%{%exp%}`
" syntax display -- on how to get syntax, as well as on possible errors, see:
"   REF: https://tinyurl.com/mvy94a4u (so)
"   REF: https://tinyurl.com/mra9x6f7 (vi.SE)
set laststatus=2                                          " statusline ON, always
set stl=%{%len(expand('%:f'))<=30?'%f':'%t'%}             " filename
set stl+=\ ft:%y                                          " file type
set stl+=\ syx:[%{&syntax}]                               " syntax
set stl+=\ cms:[%{len(&cms)>0?split(&cms,'%s')[0]:''}]    " commentstring
set stl+=\ ff:[%{&ff}]                                    " file format
set stl+=\ fo:[%{&fo}]                                    " format options
set stl+=\ cs:[%{g:colors_name}]                          " colorscheme
set stl+=%=                                               " separate left & right
set stl+=\ [%l,%c]                                        " line, column #
set stl+=\ %r                                             " readonly?
set stl+=\ %m                                             " file modified?

" cursorline: https://vim.fandom.com/wiki/Highlight_current_line
set fillchars=vert:\│                     " use this to show vsplit
set cursorline                            " cursorline ON

" ignore these file extensions
set wildignore+=*.hi,*.o,*.class

" window settings
set splitright    " vertical right split
set splitbelow    " horizontal bottom split
set mouse=a       " no terminal scrollbar!

" dirs for backup and swap files
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" set print font (used by `hardcopy` when generating `*.ps` file)
" syntax from /u/ doru @ https://tinyurl.com/y6t7rhck (linuxquestions.org)
" see also https://vimhelp.org/print.txt.html
set printfont=courier:h9

" mappings
" NOTE:  :w !pbcopy copies line selections to OSX system clipboard
"        see /u/ Brian @ https://tinyurl.com/y4n9njg7  (so)
"        for set list, see /u/ derrick zhang @ https://tinyurl.com/y7gk2ncg
"        _ch: toggle comment highlighting in normal mode.
"        _tc: toggle comments, both in visual and normal modes.
"        _sc: in normal mode, start a comment, switching to insert mode.
"        _ic: (in visual mode), inserts vim-style comment (") @ line start.
"        _rc: (in visual mode), remove symbol (typcally a comment) @ start.
"        _ws: highlights blank lines & trailing white spaces.
"        _cl: toggle cursor line and cursor column,
"        https://vim.fandom.com/wiki/Highlight_current_line
"        for use of <silent>, see https://tinyurl.com/2p84nkpu (vi.SE)
nnoremap            _sa    :SyntaxAttr<CR>
nnoremap            _ch    :ToggleCommentHl<CR>
nnoremap            _co    :colorscheme <C-Z><S-Tab>
nnoremap            _ou    :OpenUrl<CR>
nnoremap            _ts    :ToggleHlSearch<CR>
nnoremap            _cs    :ClearSearch<CR>
nnoremap  <silent>  _tc    :ToggleComment<CR>
vnoremap  <silent>  _tc    :ToggleComments<CR>
nnoremap            _sc    :StartComment<CR>
vnoremap            _ic    :norm ^i" <CR>
vnoremap            _rc    :norm ^x<CR>
vnoremap            _ri    :Reindent<CR>
vnoremap            _cp    :w !pbcopy<CR><CR>
map                 _sl    :set list! list? <CR>
nnoremap            _ws    :/^\s\+$\\|\s\+$/ <CR>
nnoremap            _cl    :set cursorline! cursorcolumn!<CR>

" ==============================================================================
" coc-vim stuff
" REF: https://github.com/neoclide/coc.nvim
" see :h coc-nvim
" we use coc-vim right now only for haskell.
" ==============================================================================
" define CocFloating highlight group
" https://github.com/neoclide/coc.nvim/wiki/F.A.Q
hi link CocFloating Normal

" these mappings below are for haskell completions in coc-vim
" REF: https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
function! CheckBackspace() abort
  let col = col('.') - 1
  " `!` before `col` is the logical `not`; see :help expression-syntax
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" this function simply re-organizes the code from the neoclide github page.
" this code, executed by `inoremap <expr>`, triggers haskell code completion.
" NOTE:
"   1. the orig code used <Tab> as the map key.
"   2. and that code returned "\<Tab>" if `CheckBackspace()` = true.
"   3. it did so to free up <Tab> for normal use outside of the mapping.
"   4. i replaced <Tab> as the map key here.
"   5. so now the code returns the map key used if `CheckBackspace()` = true.
"   6. also, the code completion now is triggered only for haskell files.
"   7. for non-haskell files, the code simply returns the map key.
"   8. `==#` is case sensitive string comparison, by the way.
" for <SID>, see https://vimdoc.sourceforge.net/htmldoc/map.html#script-local
" https://stackoverflow.com/questions/2779379/find-what-filetype-is-loaded-in-vim
function! <SID>haskellCompletion(map_key) abort
  if &filetype ==# 'haskell'
    return
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? a:map_key : coc#refresh()
  endif
  return a:map_key
endfunction

" `hc` mapping (i.e., by typing 'hc') brings up the haskell completion popup in 
" insert mode. you can then navigate the pop up, while remaining in insert mode, 
" using the built-in vim navigation with arrow keys.
" REF: https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
" REF: https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)
" REF: https://stackoverflow.com/questions/34817344/c-r-versus-expr-in-mappings
" for <SID>, see https://vimdoc.sourceforge.net/htmldoc/map.html#script-local
inoremap <silent><expr> hc <SID>haskellCompletion("hc")

" this insert-mode mapping confirms (by hitting `ENTER`) the haskell name 
" selection from the haskell completion pop up.
" REF: https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
" REF: https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)
" REF: https://stackoverflow.com/questions/34817344/c-r-versus-expr-in-mappings
" NOTE:
"   1. the code here uses <CR> as the map key.
"   2. it therefore needs to free up <CR> for normal use outside of the mapping.
"   3. that's why the code returns "\<CR>" when the coc pop up is not visible.
"   4. so if you do `<CR>` outside of the coc pop up, you'll get the usual <CR>.
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

" coc-vim: documentation on hover.
" used right now just for haskell.
" code from: https://github.com/neoclide/coc.nvim
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Use K to show documentation in preview window
" NOTE: K also shows vim :help for word under cursor; see /u/ ingo karkat @ 
" https://tinyurl.com/9vuthwf4 (so).  so our `ShowDocumentation()` works even 
" for vim, because it calls `feedkeys ('K', 'in')` when no `hover` is present.
" code from: https://github.com/neoclide/coc.nvim
nnoremap <silent> K :call ShowDocumentation()<CR>

" close popup window.
" see :h coc-floating, :h coc-nvim
" see also https://github.com/neoclide/coc.nvim
nnoremap <silent> _pc :call popup_clear()<CR>
" ==============================================================================
" haskell pragma completion code.
" this code at this time is still experimental.
" this code should eventually be moved to a separate file in vim/plugin.
" author: Prem Muthedath
function! InsertHaskellPragma(arg)
  " on `..` use, see :h expr-..
  " `normal!`: https://learnvimscriptthehardway.stevelosh.com/chapters/29.html
  let l:pragma = '{-# ' .. a:arg .. ' #-}'
  let l:cmdstr = 'normal! gI' .. l:pragma .. "\<Esc>" .. 'gE' .. 'a ' .. "\<Esc>" .. 'l'
  if getline('.') !~ '^$'
    :execute 'normal! o' .. "\<Esc>"
  endif
  :execute l:cmdstr | :startinsert
endfunction
nnoremap  _lp :call InsertHaskellPragma("LANGUAGE") <CR>
nnoremap  _op :call InsertHaskellPragma("OPTIONS_GHC") <CR>

function! DoThis()
  :execute ":vsp" g:phask_ops_ghc_formatted_iofile
  :let cnt = CountOptionsGhcFlags()
  :quit
  :return cnt
endfunction

" https://google.com
" ==============================================================================
