#!/bin/bash
# NOTE: use of set-e has gotchas: https://mywiki.wooledge.org/BashFAQ/105
# set -e usage: /u/ shizzmo @ https://tinyurl.com/3xaupkr7 (so)
set -euo pipefail  # http://redsymbol.net/articles/unofficial-bash-strict-mode/
# ==============================================================================
# bash script that extracts haskell cabal- and ghcup- installed package names 
# and module names in Prem's system. the script outputs generated package names 
# to files in vim/haskell/data/ directory, and these output files are specified 
# within the script itself. on the other hand, the script outputs generated 
# module names to a user-specified output file, and this output file name is 
# passed to the script as an argument (it's only argument) during script 
# invocation.  if you provide no argument or just an empty string as an 
# argument, however, the script will write the generated module names to the 
# default output file: vim/haskell/data/ghcup-cabal-installed-modules.txt.
#
# the generated module names are needed for haskell `import` completion in 
# haskell files using vim omnicompletion.
#
# usage:
#   1. `cd` to `dotfiles` folder, the root folder for all dotfiles
#   2. run `./output-haskell-package-and-module-names` on the commandline.
#   3. you can also specify an output file for generated module names as an 
#      argument to the command in (2).
#   4. to see module names generated, view file in vim/haskell/data/ named 
#      `ghcup-cabal-installed-modules.txt` or the file you've  specified in (3).
#   5. to see the package names generated, view files in vim/haskell/data/ 
#      folder named `cabal-installed-pkgs.txt` and `ghcup-installed-pkgs.txt`.
#
# author: Prem Muthedath, MAR 2023.
#
# ==============================================================================
# declare some needed file paths as read-only.
# ${cpkgs}  -- default output file for cabal-installed package names.
# ${gpkgs}  -- default output file for ghcup-installed package names.
# ${gcmods} -- default output file for ghcup- and cabal-installed module names.
# ${ofile}  -- user-specified (thru $1) output file for generated module names.
#
# if $1 is null or empty, ${ofile} value is set to ${gcmods}.
# for ${1:-}, see: http://redsymbol.net/articles/unofficial-bash-strict-mode/
# see also parameter expansion @ https://tinyurl.com/ywyt9z5b (GNU)
declare -r cpkgs="${HOME}/dotfiles/vim/haskell/data/cabal-installed-pkgs.txt"
declare -r gpkgs="${HOME}/dotfiles/vim/haskell/data/ghcup-installed-pkgs.txt"
declare -r gcmods="${HOME}/dotfiles/vim/haskell/data/ghcup-cabal-installed-modules.txt"
declare -r ofile=${1:-"${gcmods}"}

# on `=`, see /u/ dawg, /u/ john kugleman @ https://tinyurl.com/bxhab8pk (so)
# see /u/ gilles, /u/ michael homer @ https://tinyurl.com/2p8d2yww (unix.SE)
if [[ "${ofile}" = *[$' \t\n?:']* ]]; then
  echo "ERROR: output filename  \"${ofile}\" can NOT contain spaces, ?, :, tabs or newlines."
  exit 1
fi

# compare specified output file with default; if not same, issue a warning.
# on `=`, see /u/ dawg, /u/ john kugleman @ https://tinyurl.com/bxhab8pk (so)
if [[ "${ofile}" != "${gcmods}" ]]; then
  echo "WARNING: specified output file \"${ofile}\" is NOT same as the default one: \"${gcmods}\"."
fi

# create (if it doesn't exist) or overwrite output files; ':' is no-op command
# https://askubuntu.com/questions/831414/what-is-the-difference-between-touch-file-and-file
: > "${cpkgs}"
: > "${gpkgs}"
: > "${gcmods}"
: > "${ofile}"

# capture ghcup, cabal-install, Cabal, GHC version numbers.
# Cabal vs cabal-nstall: see /user824425/ @ https://tinyurl.com/ycybts72 (so)
# Notes:
#   1. `sed -n` says print nothing by default, unless you are explicitly asked.
#   2. here, because of `/p`, sed only prints when there is a substitution.
#   3. REF: `sed -E` extended regular expression in mac os: see /u/ kusalananda 
#      @ https://tinyurl.com/23rw9p3w (unix.SE).
#       a) we use `sed -E` here because we need `+` usage in the pattern.
#       b) BRE does not support `+` and `?`
#     ` c) with ERE, we can use ( and ), whereas with BRE, we need \( and \)
#   4. for "$()", command substitution, see /u/ gypsycosmonaut, /u/ Stéphane 
#      Chazelas @ https://tinyurl.com/4dxynh3k (unix.SE)
declare -r ghcupver="$(ghcup --version | \
  sed -E 's/^.*version ([[:digit:]v.]+)$/ghcup \1/')"
declare -r cabappver="$(cabal --version | \
  sed -nE 's/(cabal-install) version ([[:digit:].]+)$/\1 \2/p')"
declare -r cablibver="$(cabal --version | \
  sed -nE 's/^.* version ([[:digit:].]+).*(Cabal).*$/\2 \1/p')"
declare -r ghcver="$(ghc --version | \
  sed -E 's/^.*version ([[:digit:].]+).*$/GHC \1/')"

# ==============================================================================
# utility functions for header creation.

# define `plus`, a common header component; all headers start with $plus.
declare -r plus="+++++++++++++++"

# header for ghcup data, which may be ghcup-installed packages or modules.
# takes 1 argument: typically, 'ghcup-installed-something' string.
ghcup_header() {
  echo "${plus}" "${1}" "(${ghcupver}," "${ghcver})"
}

# header for cabal data, which may be cabal-installed packages or modules.
# takes 1 argument: typically, 'cabal-installed-something' string.
cabal_header() {
  echo "${plus}" "${1}" "(${cabappver}," "${cablibver}," "${ghcver})"
}

# ==============================================================================
# first, add a header for cabal-installed packages.
echo "$(cabal_header 'cabal-installed packages')" > "${cpkgs}"

# next, extract the list of cabal-installed haskell package names.
# execution steps:
#   1. search for only directories but do not dive into them (-depth 1)!
#   2. print the directories found with null separator (-print0)
#   3. extract just the directory names (which are package names) with xargs
#   4. sort package names extracted, ignoring duplicates, blanks, and case.
#   5. dump the final output, the package names, to a file.
# REF:
# 1. `find -type d -depth 1`: /u/ gvkv @ https://tinyurl.com/3f4w6fwj (unix.SE)
# 2. -print0: /u/ jneville, saul, chepner @ https://tinyurl.com/4pr4es7h (so)
# 3. extract filename using xargs: /u/ fge @ https://tinyurl.com/be8ffrdw (so)
# 4. sort -buf: see man sort in mac.
# 5. general intro to xargs: https://shapeshed.com/unix-xargs/
find ~/.cabal/packages/hackage.haskell.org -depth 1 -type d -print0 |  \
  # extract just the file name
  xargs -0 -n 1 basename | \
  # sort, ignoring duplicates (`-u`), case (`-f`), and blanks (`-b`)
  sort -buf >> "${cpkgs}"

echo "cabal-installed package names successfully written to \"${cpkgs}\"."

# ==============================================================================
# first, add a header for ghcup-installed packages.
echo "$(ghcup_header 'ghcup-installed packages')" > "${gpkgs}"

# next, extract the list of ghcup-installed haskell package names.
# execution steps:
#   1. search for only directories but do not dive into them (-depth 1)!
#   2. skip `bin`, `include`, & `package.conf.d' non-package directories.
#   3. print with null separator, extract just the directory names, which are 
#      the package names, with xargs, sort, and write package names to file.
# NOTE: sort -buf: sort, ignoring duplicates (`-u`), case (`-f`), & blanks (`-b`)
# REF:
# 1. `find -type d -depth 1`: /u/ gvkv @ https://tinyurl.com/3f4w6fwj (unix.SE)
# 2.  skip dirs in `find` using \! \(-path '*/dir' \):
#       a) /u/ dimidak, /u/ aclwitt @ https://tinyurl.com/2yu8jsrj (so)
#       b) man find in mac (see examples)
# 3. -print0: /u/ jneville, saul, chepner @ https://tinyurl.com/4pr4es7h (so)
# 4. extract filename using xargs: /u/ fge @ https://tinyurl.com/be8ffrdw (so)
# 5. sort -buf: see man sort in mac.
# 6. general intro to xargs: https://shapeshed.com/unix-xargs/
# NOTE: we used '~/.ghcup/ghc/8.10.4/lib/ghc-8.10.4' in `find`, instead of 
# '~/.ghcup/ghc/8.10.4/lib/ghc-8.10.4/package.conf.d', because `package.conf.d` 
# does not include certain packages such as html and latex -- not sure why.
find ~/.ghcup/ghc/8.10.4/lib/ghc-8.10.4 -depth 1 -type d  \
  \! \( -path '*/bin' \) \! \( -path '*/include' \) \! \( -path '*/package.conf.d' \) \
  -print0 | xargs -0 -n 1 basename | sort -buf >> "${gpkgs}"

echo "ghcup-installed package names successfully written to \"${gpkgs}\"."

# ==============================================================================
# this function extracts haskell module names associated with the package names 
# in the specified input file and prints (appends) these extracted module names 
# to the specified output file.  it extracts the module names using `cabal info` 
# and `sed` commands. it also cleans extracted data, removing leading spaces & 
# blank lines, before dumping the data to the specified output file.
#
# inputs:
#   $1 => input file containing list of haskell package names.
#   $2 => output file where list of extracted module names should be dumped.
#
# this function does not return any value, nor does it echo anything.  instead, 
# it appends its output to the specified output file.
#
# we put this code in a function to avoid duplication, because module data 
# extraction is almost identical for cabal-installed and ghcup-installed pkgs. 
#
# REF:
# 1. `cat` with `xargs`: /u/ Stefan @ https://tinyurl.com/4dxynh3k (unix.SE).  
#    NOTE: we no longer use `cat`; instead we use `sed` now to pipe to `xargs`.
# 2. also, see (not directly applicable here but still useful) - `echo "$(< 
#    file)"`: /u/ Stéphane Chazelas @ https://tinyurl.com/2p894vju (unix.SE)
# 3. print lines between 2 patterns using `sed`: /u/ hek2mgl @ 
#    https://tinyurl.com/yckatxkn (so)
# 4. match white space in mac `sed`: /u/ some ideas @ 
#    https://tinyurl.com/br7cszr4 (superuser.com)
# 5. `cabal info` idea from: https://tinyurl.com/ds4kubxe (github)
# 6. general intro to xargs: https://shapeshed.com/unix-xargs/
#
# PARSING `cabal info` information using `sed`:
#   1. when you run `cabal info` on a list of package names, say p1, p2, p3, the 
#      output has the following format:
#
#      * p1
#         Synopsis:
#         ...
#         Modules:
#           M1
#           M2
#
#      * p2
#         Synopsis:
#         ...
#         Modules:
#           M3
#           M4
#
#      * p3
#         Synopsis:
#         ...
#         Modules:
#           M5
#           M6
#           M7
#
#     To parse this information and extract the module names M1, M2, ..., M7, we 
#     use a `sed` pattern to print only the lines between `^.*Modules:` and 
#     `^\*`.  everything else is ignored. the exact `sed` command is:
#
#         sed -n '/^.*Modules:/,/^\*/{//!p;}'
#
#     `sed -n` says print nothing by default, unless you are explicitly asked.
#
#     /^.*Modules,/^\*/ => select only lines between these pattern matches.
#
#     {//!p;} => print (`p`) only lines that lie between the matched patterns, 
#     while ignoring (//!) the start & end lines that match the patterns.
#
#     REF: see /u/ hek2mgl @ https://tinyurl.com/yckatxkn (so)
#
#     NOTE: for the last block starting with `* p3`, even though no `*` follows 
#     `Modules:`, `sed` still prints these module names out!  This happens 
#     because when `sed` encounters 'Modules:', it flips the `print` switch on, 
#     and keeps printing the lines until it finds the '\*' pattern, when it will 
#     turn off the print switch.  however, in this case, it never finds the '\*` 
#     pattern because we reach the end of the file. see "Ranges by patterns" @ 
#     https://www.grymoire.com/Unix/Sed.html for an explanation.
#
#   2. once we have extracted all the lines having modules names, we need to do 
#      some clean up.  this involves:
#
#       a) getting rid of blanks: sed  '/^[[:space:]]*$/d', where `d` deletes.
#       b) getting rid of leading spaces: sed 's/^[[:space:]]*//'
#
#      once we are done with these 2 steps, we've a clean list of module names.
#
#      REF: match white space in mac `sed`: /u/ some ideas @ 
#      https://tinyurl.com/br7cszr4 (superuser.com)
extract_module_names()  {
  local i_file o_file
  i_file="${1}"
  o_file="${2}"

  # we first use `sed` to make sure we clip off any non-package name data, which 
  # typically is a fle heading, such as:
  #
  #   ^++++++++++++++++ ghcup-installed_packages (ghcup v0.1.14, GHC 8.10.4)
  #
  # the first `sed` below does this job by printing (`p`) only those lines that 
  # do not start with `+`, `.`, `*`, or ' '; the `-n` option forces `sed` to not 
  # print anythng by default, while the `p` flag tells `sed` to print only those 
  # lines that match the pattern.
  #
  # REF: `sed -E` extended regular expression in mac os: see /u/ kusalananda @ 
  # https://tinyurl.com/23rw9p3w (unix.SE).
  #   a) we use `sed -E` here because we need `+` usage in the pattern.
  #   b) BRE does not support `+` and `?`
  #   c) with ERE, we can use ( and ), whereas with BRE, we need \( and \)
  #
  # the first `sed` data then is piped to `xargs` to generate the `cabal` info.  
  # we then pipe that output to a series of `sed` commands, as described above.

  sed -nE '/^[^+.* ]+/p' "${i_file}" | \
    xargs cabal info | \
    sed -n '/^.*Modules:/,/^\*/{//!p;}' | \
    sed  '/^[[:space:]]*$/d' | \
    sed 's/^[[:space:]]*//' | \
    sort -buf >> "${o_file}"
}

# ==============================================================================
# extract both cabal- and ghcup-installed module names into file.
# https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays
# for shell equality, see /u/ dawg @ https://tinyurl.com/bxhab8pk (so)
declare -r ifiles=("${gpkgs}" "${cpkgs}")
for i in ${ifiles[@]}; do
  if [[ "${i}" == "${gpkgs}" ]]; then
    echo "$(ghcup_header 'ghcup-installed modules')" > "${gcmods}"
  else
    echo "$(cabal_header 'cabal-installed modules')" >> "${gcmods}"
  fi
  extract_module_names "${i}" "${gcmods}"
done
echo -n "ghcup- and cabal-installed module names successfully written to \"${gcmods}\"."
exit 0

# ==============================================================================
