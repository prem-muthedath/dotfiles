#!/bin/bash -E

# NOTES:
# 1. with `-E` option, `ERR` trap is inherited by shell functions, command 
#    substitutions, & commands executed in a subshell.
# 2. this script SHOULD be executed in a subshell.
# REF: https://fvue.nl/wiki/Bash:_Error_handling
################################################################################
# pathhelper executable -- called from ~/.bash_profile
# author: Prem Muthedath
#
# pathhelper, an executable called from bash_profile, "helps" ensure that @ 
# start of a bash session, as well as when you source ~/.bash_profile, PATH is 
# always initialized/reset to the default system path that Apple sets.
#
# note that the word "helps" is key -- i.e., pathhelper doesn't actually 
# initialize or set PATH; instead, it determines if PATH needs to be reset to 
# Apple's default system path, and if so, it computes and returns the 
# reset-path-command string to bash_profile.
#
# using this string, bash_profile sets PATH.  bash_profile then PREPENDS 
# user-defined custom paths to PATH.  this process always ensures a valid PATH 
# -- no duplicates & with paths in right order.
#
# REF: see /u/ algal @ https://tinyurl.com/y574yqtw (so) on how Apple sets PATH
#
# why is pathhelper needed at all?
# 1. helps ensure correct PATH -- no duplicates, right path order, etc.
# 2. when you manually source bash_profile, helps ensure PATH integrity -- i.e., 
#    you don't end up with duplicate paths (Apple does this!) & bad path order.
#
# DESIGN:
# 1. compute default system path -- named here as SYSPATH -- in right order -- 
#    in just the same way as Apple does:
#    (a) first, read /etc/paths file, & build ordered path sequence using paths 
#    listed there; ensure path sequence does not contain duplicates.
#    (b) next, read each file in etc/paths.d directory, in the order they are 
#    listed in the directory, & append path sequence (no dups) built from each 
#    file to result from (a).
#    (c) default system path = result from operations (a) & (b)
# 2. in doing (1), ensure that system path does not contain duplicates.
# 3. check if PATH == SYSPATH.  if yes, output no-op command as string to 
#    caller; finally, before exiting, clean up, & exit with last exit status.
# 4. else, log warning to ~/dotfiles/bash/log/path.log, output 
#    reset-PATH-to-SYSPATH command as string to caller; finally, before exiting, 
#    capture exit status, clean up, & exit with captured exit status.
# 5. trap any error, clean up, & exit with captured exit status.
#
# USAGE:
# 1. always run this script in a subshell, so that `-E` setting works properly; 
#    this practice also avoids inadvertently altering bash terminal PATH.
# 2. default usage: "~/path/pathhelper" -- prints warnings, etc., to console.
# 3. silent mode: "~/path/pathhelper -s" -- shows only runtime errors, if any.
# 4. help mode: "~/path/pathhelper -h" -- displays usage info & exits.
# 5. PATH reset is logged (see `DESIGN`, item 4) both in default & silent modes.
################################################################################

log_path_reset() {
  # record path-reset information in log file.
  # args: none
  local messages item
  messages=("***** $(date) *****"
      "***** WARNING: PATH not equal to SYSPATH *****"
      "***** @ start of .bash_profile load, we want PATH=SYSPATH, the core path Apple sets  *****"
      ""
      "PATH:"
      "${PATH//:/$'\n'}"
      ""
      "SYSPATH:"
      "${SYSPATH//:/$'\n'}"
      ""
      "***** Fix: reset PATH to SYSPATH  *****"
      "")
  # BUG FIX: code below redirects ALL for-loop stdout, rather than just printf 
  # stdout, to file; this avoids mangled file content that results from 
  # interspersed writes from different bash terminal sessions to file.  this 
  # problem is particularly acute for large output -- i.e., when it takes longer 
  # time for each bash terminal session to write to file.
  # REF: https://mywiki.wooledge.org/BashGuide/InputAndOutput
  for item in "${messages[@]}"; do
    printf "\n%s" "$item"
  done 1> "$logfile"
}

################################################################################

printc() {
  # if not in silent mode, print to console (i.e., stderr).
  # arg: message
  #
  # NOTE: script's main output -- PATH -- goes to stdout, which is used by the 
  # calling program (i.e., bash_profile) to set PATH.  to avoid interfering with 
  # PATH output, we print these messages (warnings, etc.) to file descriptor 3, 
  # a copy of original stderr.  that way, user can see these console messages 
  # without screwing up PATH output.
  local msg;
  msg="$1"
  if [[ "$SILENT" = "false" ]]; then
    printf '%b\n' "${msg}" 1>&3
  fi
}

shows() {
  # show status message on console.
  # args: status
  local status
  status="$1"
  printc "${CYAN}${status}${NC}"  # `NC` restricts color to just this output.
}

warn() {
  # print warning to console.
  # args: warning
  # NOTE: `NC` restricts color to just this output.
  local warning
  warning="$1"
  printc "${ORANGE}warning => ${LGREEN}${warning}${NC}"
}

################################################################################

fromfile() {
  # read file, and append all paths in it to fpath, ensuring no duplicates.
  # args: input file, fpath
  local file fpath
  file="$1" fpath="$2"

  # REF: for tilde expansion using parameter expansion, see 
  # https://tinyurl.com/y3muoeoj and https://tinyurl.com/y2mfzchz @ so
  # REF: `read -r` disables \ escape; treats each \ as part of input line; see
  # https://mywiki.wooledge.org/BashFAQ/001#trimming
  # REF: for fpath="${fpath:+${fpath}:}${path}", see /u/ sancho.s @ 
  # https://tinyurl.com/y3ts4mle (so)
  # IFS scope in `while IFS= read -r`, see https://tinyurl.com/y3z8tkcu
  # path can not contain `:` -- see /u/ chepner @ https://tinyurl.com/y24mpfn9
  # quoting within parameter expansion: https://mywiki.wooledge.org/BashFAQ/073
  local path dup
  while IFS= read -r path   # NOTE: IFS scope limited just to `read`
  do
    path="${path/#~/${HOME}}" # replace '~' (if any) @ start with home directory
    dup="(^|:)${path}(:|$)"   # `path` pattern for duplicate check
    # path MUST be a directory; if not (blanks, file, dummy, etc.), ignore it.
    # path should not contain `:` -- if it does, ignore the path.
    # if fpath already contains path, do not include the path again.
    if [[ ! -d  "$path" ]]; then
      warn "file: \"${file}\" | path \"${path}\" not a directory, so not added to PATH."
    elif [[ "$path" =~ : ]]; then
      warn "file: \"${file}\" | path \"${path}\" should not contain ':', so not added to PATH."
    elif [[ "$fpath" =~ $dup ]]; then
      warn "file: \"${file}\" | path \"${path}\" already in PATH, so not added to PATH again."
    else
      fpath="${fpath:+"${fpath}:"}${path}"
    fi
  done < "$file" || exit $?
  echo "$fpath"
}

system() {
  # compute & return default system path -- called here as FPATH -- in just the 
  # same way as Apple does @ start of a bash terminal session.
  # args: none.
  #
  # STEPS:
  # 1. read /etc/paths file, and compute path sequence, ignoring duplicates;
  # 2. next, read each file in /etc/paths.d directory, in listed order, & append 
  #    path sequence computed from each file to result in (a); ignore dups.
  # 3. return system path -- the result of operations (1) & (2)

  # NOTE: Apple uses an unordered file list from /etc/paths.d, the list you get 
  # with `ls -f` on paths.d directory, so we do the same here.
  local fnames filler FPATH

  # we redirect `ls` command stderr from terminal to this function's stderr.
  fnames="$(/bin/ls -f "$pathsd" 2>&2)"   # file names from /etc/paths.d
  filler='â–¶'                              # filler for blank in file name
  FPATH="$(fromfile "$paths")"            # syspath built from /etc/paths
  : ${FPATH:?from \""${paths}"\" can not be empty/null. Aborting ...}

  # for each file in /etc/paths.d, append computed path sequence to FPATH
  local fname f
  for fname in ${fnames// /"$filler"}  # filler avoids file name split @ blanks.
  do
    f="$pathsd"/"${fname//"$filler"/ }"   # replace filler back with space
    if [[ -f "$f" ]]; then                # check if `f` is a file
      FPATH="$(fromfile "$f" "$FPATH")"
    else
      warn "\"${f}\" not a file, so ignored in PATH initialization."
    fi
  done
  echo "$FPATH"
}

################################################################################

initialize() {
  # initialize PATH to default system path.
  # if PATH needs reset, output reset-PATH-to-SYSPATH command as string; 
  # otherwise, output `no-op` command as string.
  # args: none
  declare -r logfile="${HOME}/dotfiles/bash/log/path.log"   # log file
  declare -r paths="/etc/paths" pathsd="/etc/paths.d"       # file, dir for system paths

  shows "initializing PATH ..."     # print status
  # https://askubuntu.com/questions/831414/what-is-the-difference-between-touch-file-and-file
  : > "$logfile"  # create or overwrite log file; ':' is no-op command

  declare -r SYSPATH="$(system)"
  : ${SYSPATH:?can not be null/empty.  Aborting PATH initialization ...}
  if [[ "$PATH" != "$SYSPATH" ]]; then
    log_path_reset
    warn "RE-SETTING PATH -- see \"${logfile}\" for details."
    reset_path_command="PATH=\"${SYSPATH}\"; export PATH"
    echo "$reset_path_command"
  else
    echo ":"
  fi
  shows "done!"                     # print status
}

################################################################################

help() {
  # print usage info; args: none
  # help format: https://mywiki.wooledge.org/BashFAQ/035
  # printf usage with multiline string: https://tinyurl.com/yxzgx5a7
  # NOTE: `NC` restricts color to just this output.
  printf '%b\n' \
    "${LGREEN}Usage: ${0##*/} [-hs]" \
    "Customized PATH initialization." \
    "This script SHOULD be run in a subshell." \
    "   -h      display this help and exit." \
    "   -s      silent mode.${NC}"
}

setopt() {
  # set option passed to script.
  # args: "$*"
  local opts
  opts="$1"  SILENT=false   # default mode is verbose
  case "$opts" in
    -h)   # help mode -- print usage info to console & exit
      help 1>&2
      exit 1
      ;;
    -s)   # silent mode -- show nothing except runtime errors
      SILENT=true
      ;;
    '')   # default mode -- print (status, warnings) to console
      :
      ;;
    *)    # bad option -- warn, print usage info to console, & exit
      printf '%b\n' "${ORANGE}unknown option: '${opts}'${NC}" 1>&2
      setopt '-h'
      ;;
  esac
}

################################################################################

printerrors() {
  # print logged runtime errors.
  # prints each line in file `"$errorfile"` to stderr.
  # args: none
  errorpattern="${0##*/}"   # this script's name, with path stripped.
  # IFS scope in `while IFS= read -r`, see https://tinyurl.com/y3z8tkcu
  while IFS= read -r line; do   # NOTE: IFS scope limited just to `read`
    if [[ "$line" =~ $errorpattern ]]; then
      line="${RED}ERROR => ${line}${NC}"        # tag & color error line.
    elif [[ "$line" =~ ls: ]]; then             # `ls` command error string check
      line="${RED}ERROR => ${0}: ${line}${NC}"  # add script name, then tag & color
    fi
    printf '%b\n' "${line}"
  done < "$errorfile" 1>&2    # print to stderr
}

cleanup() {
  # capture exit status, clean up, & exit with captured exit status.
  # args: none

  # NOTE: capture the exit status first, BEFORE doing anything else!!
  local ARG=$?  # exit status of last executed command; non-zero => failure
  if [[ -f "$errorfile" ]]; then
    # print logged runtime errors & then delete temp file.
    { printerrors &&
      rm -f "$errorfile"
    } ||
    # capture (failed) status code & print error message to stderr.
    { ARG=$?
      errmsg="${RED}ERROR => failed to remove temporary error file "
      errmsg+="'${errorfile}'.${NC}"
      printf '%b\n' "${errmsg}" 1>&2
    }
  fi
  set +f      # clean up
  exec 3>&-   # clean up -- close file descriptor 3
  exit "${ARG}"
}

################################################################################

# REF: `man bash` -- traps: ERR with -E => simple command non-zero status exit 
# from functions, $(), & subshells; EXIT => exit from this shell only.
# REF: options parsing, see https://wiki.bash-hackers.org/scripting/posparams
#
# NOTES:
# 1. we create a new file descriptor, 3, a copy of stderr, to write, in real 
#    time, all status messages & warnings to console.
# 2. we then redirect stderr to a temp file with randomized name to capture 
#    runtime errors during PATH initialization.  by having a randomized file 
#    name, we ensure each bash terminal session has a unique file, avoiding 
#    file-resource clashes between sessions. we print contents of temp file to 
#    console in `cleanup()`, the function the `EXIT` trap calls.
# 3. before exit, `cleanup()` closes file descriptor 3 & removes the temp file.
# 4. stderr in a variable: see /u/ tripleee @ https://tinyurl.com/y5tyf4hh (so)
set -f  # disable file name generation (globbing); inherited by subshells.
declare -r errorfile="${HOME}/dotfiles/bash/log/error${RANDOM}.txt"
trap 'exit $?' ERR  # trap error & exit
trap cleanup EXIT   # ensure clean exit
setopt "$*"         # "$*" expands to "$1c$2c$3...$N"; 'c' is `IFS` 1st char.
exec 3>&2           # copy stderr to new file descriptor 3.
var="$(initialize 2>"$errorfile")"   # NOTE: `set -x` output will go to file.
echo "$var"
exit 0

################################################################################


